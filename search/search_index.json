{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to StemmaBench","text":"<p>A powerful and easy to use Python library to generate artificial manuscript tradition, by simulating scribal behavior in order to benchmark stemmatology algorithms. You can simply generate a tradition, apply your stemmatology algorithms on the generated texts, and assess how well your tree was reconstructed compared to the ground truth.</p>"},{"location":"#installing","title":"Installing","text":"<p>Stemmabench is available on PyPi:</p> <p><code>pip install stemmabench</code></p> <p>You can also clone the source code if you want access to the demonstration folder, then install it using in the root folder:</p> <p><code>invoke install</code></p>"},{"location":"#using-stemmabench","title":"Using StemmaBench","text":"<p>StemmaBench requires two items:</p> <ul> <li> <p>The initial text to be copied by the artificial scribe.</p> </li> <li> <p>A YAML configuration file parametrizing the variants. For more information regarding the configuration file, go to the variant description page.</p> </li> </ul> <p>Once you have your wanted text and wanted configuration file, you can run the command:</p> <pre><code>generate input.txt output_folder config.yaml\n</code></pre> <p>This will output the generated text as well as the tree structure in the folder <code>output_folder</code>.</p> <p>Demonstration data is available in the folder <code>./demo</code>.</p>"},{"location":"about/","title":"About the project","text":""},{"location":"about/#funding","title":"Funding","text":"<p>StemmaBench is funded by the SCRIBES (Biblissima+) and the SHERBET (ANR AAPG 2023) projects.</p>"},{"location":"about/#developers","title":"Developers","text":"<p>The main developer is Sophie Robert, a postdoctoral researcher @ the University of Lorraine, at the Ecritures laboratory. She is currently working on computational stemmatology to study the transmission of the Hebrew Bible. For further inquiry or collaboration, she can be contacted at sophie.robert2@etu.univ-lorraine.fr.</p> <p>A huge thanks to Yedidia Agnimo for his contribution to the development of the Python package.</p>"},{"location":"outputs/","title":"Generated outputs","text":"<p>StemmaBench generates two outputs within the <code>output_folder</code> specified in the command line:</p> <ol> <li>A file <code>edge.txt</code> which represents the tree as a set of node.</li> <li>A set of file <code>*.txt</code> which contain the copied text and which number represent their hierarchy in the tree. <code>0</code> is the first text, then <code>0_0</code> and <code>0_1</code> are its descendants, then <code>0_0_0</code> and <code>0_0_1</code> are the descendants of <code>0_0</code> in a bifid tree fashion, etc.</li> </ol> <p>Furthermore, if the <code>rate</code> parameter of the <code>missing_manuscripts</code> option is greater than zero, an additional folder called <code>missing_tradition</code> is created within the <code>output_folder</code> specified in the command line. This folder includes:</p> <ul> <li>A file named <code>edge_missing.txt</code> containing the edges connecting the non-missing manuscripts still available.</li> <li>A collection of <code>*.txt</code> files with the remaining manuscripts in the tradition. These files exclude any manuscripts that were deleted during the process.</li> </ul>"},{"location":"variants/","title":"Scribal behavior modelization","text":"<p>StemmaBench relies on the assumption that scribal behavior can be successfully modelized using probabilistic processes.</p> <p>The parameters are specified into a YAML file, such as:</p> <pre><code>meta:\nlanguage: en\nvariants:\nwords:\nsynonym:\nlaw: Bernouilli\nrate: 0.1\nmispell:\nlaw: Bernouilli\nrate: 0.05\nomit:\nlaw: Bernouilli\nrate: 0.05\nsentences:\nduplicate:\nargs:\nnbr_words: 2\nlaw: Bernouilli\nrate: 0.1\nstemma:\ndepth: 2\nwidth:\nlaw: Uniform\nmin: 2\nmax: 4\nmissing_manuscripts:\nlaw: Bernouilli\nrate: 0.5\n</code></pre>"},{"location":"variants/#scribal-dependent-variants","title":"Scribal dependent variants","text":"<p>For now, the following possible variants are modelized using a Bernouilli law, meaning that each time a word is \"generated\" (i.e. each time a scribe \"writes\" a word) the word is modified with probability p (else it remains the same).</p> <p>Possible variants are:</p>"},{"location":"variants/#at-the-word-level","title":"At the word level","text":"<ul> <li>Word mispell: A random letter location is drawn according to a uniform law across the whole word. The letter is then replace with a randomly drawn letter from the alphabet.</li> <li>Word omission: The word is omitted.</li> <li>Synonym: A synonym is randomly drawn from NLTK semantic net.</li> </ul>"},{"location":"variants/#at-the-sentence-level","title":"At the sentence level","text":"<ul> <li>Duplication: A word can be copied several times. A random location in the sentence is selected, and words are duplicated by a configurable number of words (for now, fixed).</li> </ul>"},{"location":"variants/#scribal-independent-variants","title":"Scribal independent variants","text":""},{"location":"variants/#fragmentation","title":"Fragmentation","text":""},{"location":"variants/#missing-manuscripts","title":"Missing manuscripts","text":"<p>In the StemmaBench package, the concept of missing manuscripts is modeled using a probabilistic process governed by a p-parameter Bernoulli distribution. After having generating the whole tradition, a proportion p of the manuscripts are selected (with equiprobability) and deleted from the tradition. This simulates the loss of certain manuscripts over time.</p> <p>[!WARNING]</p> <p>Currently, the missing manunscript feature is only available in command-line interface, not in RAM.</p>"},{"location":"variants/#supported-languages","title":"Supported languages","text":"<p>Two languages are currently supported: - English; - Greek.</p> <p>Additional support for biblical Hebrew is underway.</p>"}]}